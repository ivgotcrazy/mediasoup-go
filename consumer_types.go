package mediasoup

// ConsumerOptions define options to create a consumer.
type ConsumerOptions struct {
	// ProducerId is the id of the Producer to consume.
	ProducerId string `json:"producerId,omitempty"`

	// RtpCapabilities is RTP capabilities of the consuming endpoint.
	RtpCapabilities *RtpCapabilities `json:"rtpCapabilities,omitempty"`

	// Paused define whether the Consumer must start in paused mode. Default false.
	//
	// When creating a video Consumer, it's recommended to set paused to true,
	// then transmit the Consumer parameters to the consuming endpoint and, once
	// the consuming endpoint has created its local side Consumer, unpause the
	// server side Consumer using the resume() method. This is an optimization
	// to make it possible for the consuming endpoint to render the video as far
	// as possible. If the server side Consumer was created with paused false,
	// mediasoup will immediately request a key frame to the remote Producer and
	// suych a key frame may reach the consuming endpoint even before it's ready
	// to consume it, generating “black” video until the device requests a keyframe
	// by itself.
	Paused bool `json:"paused,omitempty"`

	// Mid is the MID for the consumer If not specified, a sequentially growing
	// number will be assigned.
	Mid string `json:"mid,omitempty"`

	// PreferredLayers define preferred spatial and temporal layer for simulcast or
	// SVC media sources. If unset, the highest ones are selected.
	PreferredLayers *ConsumerLayers `json:"preferredLayers,omitempty"`

	// Whether this Consumer should enable RTP retransmissions, storing sent RTP
	// and processing the incoming RTCP NACK from the remote Consumer. If not set
	// it's true by default for video codecs and false for audio codecs. If set
	// to true, NACK will be enabled if both endpoints (mediasoup and the remote
	// Consumer) support NACK for this codec. When it comes to audio codecs, just
	// OPUS supports NACK.
	EnableRtx *bool `json:"enableRtx,omitempty"`

	// IgnoreDtx define whether this Consumer should ignore DTX packets (only valid for
	// Opus codec). If set, DTX packets are not forwarded to the remote consumer.
	IgnoreDtx bool `json:"ignoreDtx,omitempty"`

	// Pipe define whether this Consumer should consume all RTP streams generated by the
	// Producer.
	Pipe bool `json:"pipe,omitempty"`

	// AppData is custom application data.
	AppData H `json:"appData,omitempty"`
}

// ConsumerScore define "score" event data
type ConsumerScore struct {
	// Score of the RTP stream of the consumer.
	Score int `json:"score"`

	// Score of the currently selected RTP stream of the producer.
	ProducerScore int `json:"producerScore"`

	// ProducerScores is the scores of all RTP streams in the producer ordered
	// by encoding (just useful when the producer uses simulcast).
	ProducerScores []int `json:"producerScores,omitempty"`
}

type ConsumerLayers struct {
	// SpatialLayer is the spatial layer index (from 0 to N).
	SpatialLayer uint8 `json:"spatialLayer"`

	// TemporalLayer is the temporal layer index (from 0 to N).
	TemporalLayer *uint8 `json:"temporalLayer,omitempty"`
}

// ConsumerType define Consumer type.
type ConsumerType string

const (
	ConsumerSimple    ConsumerType = "simple"
	ConsumerSimulcast ConsumerType = "simulcast"
	ConsumerSvc       ConsumerType = "svc"
	ConsumerPipe      ConsumerType = "pipe"
)

type ConsumerDump struct {
	Id                         string                   `json:"id"`
	Type                       ConsumerType             `json:"type"`
	ProducerId                 string                   `json:"producerId"`
	Kind                       MediaKind                `json:"kind"`
	RtpParameters              *RtpParameters           `json:"rtpParameters"`
	ConsumableRtpEncodings     []*RtpEncodingParameters `json:"consumableRtpEncodings,omitempty"`
	SupportedCodecPayloadTypes []int                    `json:"supportedCodecPayloadTypes"`
	TraceEventTypes            []ConsumerTraceEventType `json:"traceEventTypes"`
	Paused                     bool                     `json:"paused"`
	ProducerPaused             bool                     `json:"producerPaused"`
	Priority                   uint8                    `json:"priority"`

	*SimpleConsumerDump
	*SimulcastConsumerDump
	*SvcConsumerDump
	*PipeConsumerDump
}

type SimpleConsumerDump struct {
	RtpStream *RtpStreamDump `json:"rtpStream"`
}

type SimulcastConsumerDump struct {
	RtpStream              *RtpStreamDump `json:"rtpStream"`
	PreferredSpatialLayer  int16          `json:"preferredSpatialLayer"`
	TargetSpatialLayer     int16          `json:"targetSpatialLayer"`
	CurrentSpatialLayer    int16          `json:"currentSpatialLayer"`
	PreferredTemporalLayer int16          `json:"preferredTemporalLayer"`
	TargetTemporalLayer    int16          `json:"targetTemporalLayer"`
	CurrentTemporalLayer   int16          `json:"currentTemporalLayer"`
}

type SvcConsumerDump = SimulcastConsumerDump

type PipeConsumerDump struct {
	RtpStreams []*RtpStreamDump `json:"rtpStreams"`
}

// RtpStreamDump represents the dump of an RTP stream.
type RtpStreamDump struct {
	Params    RtpStreamParametersDump `json:"params"`
	Score     uint8                   `json:"score"`
	RtxStream *RtxStreamDump          `json:"rtxStream,omitempty"`
}

// RtpStreamParametersDump represents the parameters of an RTP stream dump.
type RtpStreamParametersDump struct {
	EncodingIdx    uint32  `json:"encodingIdx"`
	Ssrc           uint32  `json:"ssrc"`
	PayloadType    uint8   `json:"payloadType"`
	MimeType       string  `json:"mimeType"`
	ClockRate      uint32  `json:"clockRate"`
	Rid            string  `json:"rid,omitempty"`
	Cname          string  `json:"cname"`
	RtxSsrc        *uint32 `json:"rtxSsrc,omitempty"`
	RtxPayloadType *uint8  `json:"rtxPayloadType,omitempty"`
	UseNack        bool    `json:"useNack"`
	UsePli         bool    `json:"usePli"`
	UseFir         bool    `json:"useFir"`
	UseInBandFec   bool    `json:"useInBandFec"`
	UseDtx         bool    `json:"useDtx"`
	SpatialLayers  uint8   `json:"spatialLayers"`
	TemporalLayers uint8   `json:"temporalLayers"`
}

// RtxStreamDump represents the dump of an RTX stream.
type RtxStreamDump struct {
	Params RtxStreamParameters `json:"params"`
}

type RtxStreamParameters struct {
	Ssrc        uint32 `json:"ssrc"`
	PayloadType uint8  `json:"payloadType"`
	MimeType    string `json:"mimeType"`
	ClockRate   uint32 `json:"clockRate"`
	Rrid        string `json:"rrid,omitempty"`
	Cname       string `json:"cname"`
}

type ConsumerStat = RtpStreamStats

// ConsumerTraceEventData is "trace" event data.
type ConsumerTraceEventData struct {
	// Type specifies the type of trace event.
	Type ConsumerTraceEventType `json:"type,omitempty"`

	// Timestamp indicates when the event occurred.
	Timestamp uint64 `json:"timestamp,omitempty"`

	// Direction is event direction, "in" | "out".
	Direction string `json:"direction,omitempty"`

	// Info contains additional data specific to the trace event type, which can be one of:
	// - *RtpTraceInfo
	// - *KeyFrameTraceInfo
	// - *FirTraceInfo
	// - *PliTraceInfo
	Info any `json:"info,omitempty"`
}

// ConsumerTraceEventType is valid types for "trace" event.
type ConsumerTraceEventType string

const (
	ConsumerTraceEventRtp      ConsumerTraceEventType = "rtp"
	ConsumerTraceEventKeyframe ConsumerTraceEventType = "keyframe"
	ConsumerTraceEventPli      ConsumerTraceEventType = "pli"
	ConsumerTraceEventFir      ConsumerTraceEventType = "fir"
)
